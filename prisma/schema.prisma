// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id
  name String @db.VarChar(255)
  email String @unique @db.VarChar(255)
  emailVerified Boolean
  image String?
  countryId Int 
  Country Country @relation(fields: [countryId], references: [id])
  Collection Collection[]
  createdAt DateTime
  updatedAt DateTime
  Sessions Session[]
  Accounts Account[]
}

model Session {
  id String @id
  expiresAt DateTime
  token String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId String
  User User @relation(fields: [userId], references: [id])

  @@unique([token])
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model Country {
  id Int @id @default(autoincrement())
  name String @unique @db.Text()
  countryCode String @db.Text()
  flag String @db.VarChar(255)
  subregion String @db.Text()
  region String @db.Text()
  User User[]
  products ProductsOnCountries[]
}

model Product {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  description String @db.VarChar(255)
  lore String? @db.Text()
  image String? @db.VarChar(255)
  category ProductsOnCategories[]
  countries ProductsOnCountries[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Pivot table for products and countries (or JOIN table)
model ProductsOnCountries {
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  country Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId Int

  @@id([productId, countryId])
}

model ProductsOnCategories {
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  @@id([productId, categoryId])
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  product ProductsOnCategories[]
}

model Collection {
  id Int @id @default(autoincrement())
  User User @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}